package com.tesst;
// Generated 2018-2-2 16:05:43 by Hibernate Tools 5.2.6.Final

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * LovesFans generated by hbm2java
 */
@Entity
@Table(name = "loves_fans", catalog = "stonewalls")
public class LovesFans implements java.io.Serializable {

	private LovesFansId id;
	private Userinfo userinfoByLovers;
	private Userinfo userinfoByFans;
	private int loversOrder;

	public LovesFans() {
	}

	public LovesFans(LovesFansId id, Userinfo userinfoByLovers, Userinfo userinfoByFans, int loversOrder) {
		this.id = id;
		this.userinfoByLovers = userinfoByLovers;
		this.userinfoByFans = userinfoByFans;
		this.loversOrder = loversOrder;
	}

	@EmbeddedId

	@AttributeOverrides({ @AttributeOverride(name = "fans", column = @Column(name = "FANS", nullable = false)),
			@AttributeOverride(name = "fansOrder", column = @Column(name = "fans_ORDER", nullable = false)) })
	public LovesFansId getId() {
		return this.id;
	}

	public void setId(LovesFansId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LOVERS", nullable = false)
	public Userinfo getUserinfoByLovers() {
		return this.userinfoByLovers;
	}

	public void setUserinfoByLovers(Userinfo userinfoByLovers) {
		this.userinfoByLovers = userinfoByLovers;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FANS", nullable = false, insertable = false, updatable = false)
	public Userinfo getUserinfoByFans() {
		return this.userinfoByFans;
	}

	public void setUserinfoByFans(Userinfo userinfoByFans) {
		this.userinfoByFans = userinfoByFans;
	}

	@Column(name = "lovers_ORDER", nullable = false)
	public int getLoversOrder() {
		return this.loversOrder;
	}

	public void setLoversOrder(int loversOrder) {
		this.loversOrder = loversOrder;
	}

}
